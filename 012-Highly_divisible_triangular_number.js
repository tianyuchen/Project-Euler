// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//    1: 1
//    3: 1,3
//    6: 1,2,3,6
//   10: 1,2,5,10
//   15: 1,3,5,15
//   21: 1,3,7,21
//   28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred
// divisors?

/**
 * Function to calculate triangle number
 * @param {number} n th tiangle number
 * @return {number}
 */
function triangleNum(n) {
  return (n * (n + 1)) / 2;
}

/**
 * Function to calculate the number of factors
 * @param {number} n
 * @return {number} factors's number
 */
function numFactors(n) {
  let factorsCount = 0;
  let sqrtNum = Math.floor(Math.sqrt(n));
  for (let i = 1; i <= sqrtNum; ++i) {
    if (n % i == 0) {
      factorsCount += 2;
    }
  }

  if (Number.isInteger(Math.sqrt(n))) {
    factorsCount -= 1;
  }
  return factorsCount;
}

/**
 * Function to calculate the first triangle number to have over 500 divisors
 * @return {number}
 */
function divisibleTriangularNumber() {
  let i = 1;
  while (numFactors(triangleNum(i)) <= 500) {
    ++i;
  }
  return triangleNum(i);
}

console.log(divisibleTriangularNumber());
