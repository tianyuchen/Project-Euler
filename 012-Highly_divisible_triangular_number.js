// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//    1: 1
//    3: 1,3
//    6: 1,2,3,6
//   10: 1,2,5,10
//   15: 1,3,5,15
//   21: 1,3,7,21
//   28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

function triangleNum(n) {
  var res = 1
  for (let i = 2; i <= n; ++i) {
    res += i
  }
  return res
}

function numFactors(n) {
  var factorsCount = 1
  const sqrtNum = Math.floor(Math.sqrt(n))
  for (let i = 2; i <= sqrtNum; ++i) {
    if (n % i == 0) {
      factorsCount += 1
    }
  }
  // double the count because we only tested up to sqrt(n)
  factorsCount *= 2

  if (Number.isInteger(Math.sqrt(n))) {
    factorsCount -= 1
  }
  return factorsCount
}

function divisibleTriangularNumber() {
  for (let i = 1;; ++i) {
    var res = triangleNum(i)
    if (numFactors(res) > 500) {
      return res
    }
  }
}

console.log(divisibleTriangularNumber())
